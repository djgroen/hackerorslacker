def get_data():
    return {'165': {'fragment': 'def mangle_docstrings(app, what, name, obj, options, lines,\n                      reference_offset=[0]):\n\n    cfg = dict(use_plots=app.config.numpydoc_use_plots,\n               show_class_members=app.config.numpydoc_show_class_members)\n\n    if what == \'module\':\n        # Strip top title\n        title_re = re.compile(ur\'^\\s*[#*=]{4,}\\n[a-z0-9 -]+\\n[#*=]{4,}\\s*\',\n                              re.I|re.S)\n        lines[:] = title_re.sub(u\'\', u"\\n".join(lines)).split(u"\\n")\n    else:\n        doc = get_doc_object(obj, what, u"\\n".join(lines), config=cfg)\n        lines[:] = unicode(doc).split(u"\\n")\n\n', 'user': 'apawlik'}, '133': {'fragment': 'def cause_segmentation_fault():\n    """Crashes the Python interpreter by segfaulting."""\n    i = ctypes.c_char(\'a\')\n    j = ctypes.pointer(i)\n    c = 0\n    while True:\n        j[c] = \'a\'\n        c += 1\n    return j\n\n', 'user': 'DevasenaInupakutika'}, '132': {'fragment': '    def sqlite(self, filename, query):\n        connection = sqlite3.connect(filename)\n        cursor = connection.cursor()\n        try:\n            cursor.execute(query)\n            results = cursor.fetchall()\n            display(HTML(self.tablify(results)))\n        except Exception, e:\n            import sys\n            print >> sys.stderr, "exception", e\n        cursor.close()\n        connection.close()\n\n', 'user': 'apawlik'}, '131': {'fragment': 'logger = logging.getLogger(__name__)\n\n\nclass Dispatcher(dispatcher.Dispatcher, dispatcher.SpaceCreationMixin):\n    """A concrete dispatcher."""\n\n\ndispatcher = Dispatcher()\ncommand = dispatcher.command\n\n\n@command()\n', 'user': 'dimazest'}, '130': {'fragment': 'def CrazyFunc(x):\n\treturn (scipy.special.i1(x) - 1)**3\n\nprint("Try integrating CrazyFunc on the range [-5, 10]...")\n\nval, err = scipy.integrate.quad(CrazyFunc, -5, 10)\n\nprint("A Crazy Function integrates to %.8E"%val)  \nprint("And with insanely low error of %.8E"%err)  \nprint("")\n\n#You can also use scipy.integrate.Inf for infinity in the limits of integration\nprint("Now try integrating e^x on [-inf, 0]")\nprint("(val, err) = " + str( scipy.integrate.quad(scipy.exp, -scipy.integrate.Inf, 0.0) ))\nprint("")\n\n#2D integrations follows similarly, \n', 'user': 'DevasenaInupakutika'}, '137': {'fragment': 'def cause_segmentation_fault():\n    """Crashes the Python interpreter by segfaulting."""\n    i = ctypes.c_char(\'a\')\n    j = ctypes.pointer(i)\n    c = 0\n    while True:\n        j[c] = \'a\'\n        c += 1\n    return j\n\n', 'user': 'apawlik'}, '136': {'fragment': "    def __init__(self, start_lineno, end_lineno, text):\n        # int : The first line number in the block. 1-indexed.\n        self.start_lineno = start_lineno\n        # int : The last line number. Inclusive!\n        self.end_lineno = end_lineno\n        # str : The text block including '#' character but not any leading spaces.\n        self.text = text\n\n", 'user': 'apawlik'}, '135': {'fragment': 'def conway(population, generations=100):\n    """Runs Conway\'s game of life on an initial population."""\n    population = set(population)\n    for i in range(generations):\n        population = evolve(population)\n    return list(population) \n\n\n', 'user': 'apawlik'}, '134': {'fragment': "def main():\n    script = sys.argv[0]\n    for filename in sys.argv[1:]:\n        data = np.loadtxt(filename, delimiter=',')\n        for m in data.mean(axis=1):\n            print m\n\nmain()\n\n", 'user': 'apawlik'}, '139': {'fragment': 'def transcripts(\n    utterances,\n    format=(\'f\', \'{u.caller} {damsl_act_tag}: {u.text}\', \'Format.\'),\n):\n    """Print all the transcripts in a human readable way."""\n    caller = None\n    for utterance in utterances:\n        if caller != utterance.caller:\n            if caller is not None:\n                print()\n            caller = utterance.caller\n\n        print(format.format(\n            u=utterance,\n            damsl_act_tag=utterance.damsl_act_tag(),\n        ))\n\n\n@command()\n', 'user': 'dimazest'}, '138': {'fragment': 'logger = logging.getLogger(__name__)\n\n\nclass BNCDispatcher(Dispatcher, SpaceCreationMixin):\n    """BNC dispathcer."""\n\n    global__bnc = \'\', \'corpora/BNC/Texts\', \'Path to the BNC corpus.\'\n    global__fileids = \'\', r\'[A-K]/\\w*/\\w*\\.xml\', \'Files to be read in the corpus.\'\n\n    @Resource\n', 'user': 'dimazest'}, '166': {'fragment': "def check():\n    if _sys.version_info < (2, 6):\n        print('check for Python version (python):')\n        print('outdated version of Python: ' + _sys.version)\n        return False\n    return True\n\n\n", 'user': 'apawlik'}, '24': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '25': {'fragment': 'def calculate_gc(x):\n    """Calculates the GC content of DNA sequence x.\n    x: a string composed only of A\'s, T\'s, G\'s, and C\'s."""\n    x = x.upper()\n    return float(x.count(\'G\') + x.count(\'C\')) / (x.count(\'G\') + x.count(\'C\') + x.count(\'A\') + x.count(\'T\'))\n\n"""\nLonger exercise: Reading Cochlear implant into Python\n\nPart 1:\nWrite a function `view_cochlear` that will open the file and print out each line. The only input to the function should be the name of the file as a string. \n"""\n', 'user': 'apawlik'}, '26': {'fragment': 'def downloadgbk(accessionno):\n    from Bio import Entrez\n    Entrez.email = "swc@example.com    # Tell NCBI who you are!\n    Entrez.tool = "SoftwareCarpentryBootcamp"\n\n    filename = "%s.gbk" % accessionno       \n    print "Trying efectch on %s, writing to %s" % ( accessionno, filename )\n    if not os.path.isfile(filename):  \n        net_handle = Entrez.efetch(db="nucleotide", id=accessionno, rettype="gb", retmode="text") \n        out_handle = open(filename, "w")\n        out_handle.write(net_handle.read()) \n        net_handle.close()\n        out_handle.close()\n    else:\n        print "skipping, %s already exists!" % filename\n\n', 'user': 'DevasenaInupakutika'}, '27': {'fragment': 'def fetch_contigs(contig_list):\n   contigs = open(contig_list, \'r\').readlines()\n   for seq in assembly:\n     for contig in contigs:\n       if seq.id.find(contig)!= -1:\n         outfile = "%s.fasta" % contig\n         out = open(outfile, \'w\')\n         seq_out = ">%s\\n%s" % (seq.id, seq.seq)\n         out.write(seq_out)\n\n\nfetch_contigs(args[1])\n\n\n', 'user': 'janepipistrelle'}, '20': {'fragment': '    def __init__(self, data):\n        """\n        Parameters\n        ----------\n        data : str\n           String with lines separated by \'\\n\'.\n\n        """\n        if isinstance(data,list):\n            self._str = data\n        else:\n            self._str = data.split(\'\\n\') # store string as list of lines\n\n        self.reset()\n\n', 'user': 'apawlik'}, '21': {'fragment': 'def make_data(intercept, tempslope, rainfallslope, numyears):\n    years = np.arange(2010 - numyears, 2011)\n    temps = np.random.uniform(70, 90, len(years))\n    rainfalls = np.random.uniform(100, 300, len(years))\n    noise = 2 * np.random.randn(len(years))\n    mosquitos = intercept + tempslope * temps + rainfallslope * rainfalls + noise\n    return zip(years, temps, rainfalls, mosquitos)\n\n', 'user': 'apawlik'}, '22': {'fragment': "def border(grid, color):\n    assert grid.width > 1, 'Must have at least two columns to draw border.'\n    assert grid.height > 1, 'Must have at least two rows to draw border.'\n\n    grid[0,  :] = color\n    grid[-1, :] = color\n    grid[:,  0] = color\n    grid[:, -1] = color\n\n", 'user': 'apawlik'}, '23': {'fragment': '    def __init__(self, cls, modulename=\'\', func_doc=SphinxFunctionDoc):\n        if not inspect.isclass(cls):\n            raise ValueError("Initialise using a class. Got %r" % cls)\n        self._cls = cls\n\n        if modulename and not modulename.endswith(\'.\'):\n            modulename += \'.\'\n        self._mod = modulename\n', 'user': 'apawlik'}, '160': {'fragment': '    def __init__(self,name_in,allele_in,start_position_in,end_position_in,reverse_in):\n        self.name = name_in\n        self.allele = allele_in\n        self.start_position = start_position_in\n        self.end_position = end_position_in\n        self.reverse - reverse_in\n\n\nclass BIGSContig:\n\n', 'user': 'janepipistrelle'}, '28': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '29': {'fragment': 'def calculate_gc(x):\n    """Calculates the GC content of DNA sequence x.\n    x: a string composed only of A\'s, T\'s, G\'s, and C\'s."""\n    x = x.upper()\n    return float(x.count(\'G\') + x.count(\'C\')) / (x.count(\'G\') + x.count(\'C\') + x.count(\'A\') + x.count(\'T\'))\n\n"""\nLonger exercise: Reading Cochlear implant into Python\n\nPart 1:\nWrite a function `view_cochlear` that will open the file and print out each line. The only input to the function should be the name of the file as a string. \n"""\n', 'user': 'apawlik'}, '161': {'fragment': 'def HappyGo_lucky():  \n   tten = aNumber * 10 # times ten\n   if tten< 60:\n         return 60\n   else:\n     return tten\n\n409\n\nprint HappyGo_lucky()\n\n', 'user': 'apawlik'}, '0': {'fragment': 'def sim_distance(prefs,person1,person2):\n  # Get the list of shared_items\n  si={}\n  for item in prefs[person1]: \n    if item in prefs[person2]: si[item]=1\n\n  # if they have no ratings in common, return 0\n  if len(si)==0: return 0\n\n  # Add up the squares of all the differences\n  sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],2) \n                      for item in prefs[person1] if item in prefs[person2]])\n\n  return 1/(1+sum_of_squares)\n\n# Returns the Pearson correlation coefficient for p1 and p2\n', 'user': 'apawlik'}, '4': {'fragment': "def f(x):\n\treturn (7.0 + (1+x)**(4.0/3.0))**(1.0/3.0)\n\n#Through someone else's labors we know the expansion to be... \nf_exp = [2.0, 1.0/9.0, 1.0/81.0, -49.0/8748.0, 175.0/78732.0]\n\n#The Pade coefficients are given simply by, \np, q = scipy.misc.pade(f_exp, (5-1)/2)\n#p and q are of numpy's polynomial class\n#So the Pade approximation is given by \n", 'user': 'apawlik'}, '8': {'fragment': "    def __init__(self, start_lineno, end_lineno, text):\n        # int : The first line number in the block. 1-indexed.\n        self.start_lineno = start_lineno\n        # int : The last line number. Inclusive!\n        self.end_lineno = end_lineno\n        # str : The text block including '#' character but not any leading spaces.\n        self.text = text\n\n", 'user': 'apawlik'}, '163': {'fragment': '    def __init__(self, cls, modulename=\'\', func_doc=SphinxFunctionDoc):\n        if not inspect.isclass(cls):\n            raise ValueError("Initialise using a class. Got %r" % cls)\n        self._cls = cls\n\n        if modulename and not modulename.endswith(\'.\'):\n            modulename += \'.\'\n        self._mod = modulename\n', 'user': 'DevasenaInupakutika'}, '119': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '120': {'fragment': 'def dynamic_array(size=1000000):\n    """Fills an array that is sized dynamically."""\n    dynamic = []\n    for i in range(size):\n        dynamic.append(random() * i)\n    return dynamic\n\n\n', 'user': 'apawlik'}, '121': {'fragment': 'def mean(numlist):\n    try :\n        total = sum(numlist)\n        length = len(numlist)\n    except TypeError :\n        raise TypeError("The list was not numbers.")\n    except :\n        print "Something unknown happened with the list."\n    return total/length\n\n', 'user': 'apawlik'}, '122': {'fragment': '    def __init__(self, data):\n        """\n        Parameters\n        ----------\n        data : str\n           String with lines separated by \'\\n\'.\n\n        """\n        if isinstance(data,list):\n            self._str = data\n        else:\n            self._str = data.split(\'\\n\') # store string as list of lines\n\n        self.reset()\n\n', 'user': 'apawlik'}, '123': {'fragment': 'def dynamic_array(size=1000000):\n    """Fills an array that is sized dynamically."""\n    dynamic = []\n    for i in range(size):\n        dynamic.append(random() * i)\n    return dynamic\n\n\n', 'user': 'apawlik'}, '124': {'fragment': 'def InverseImage(imgarr):\n\treturn 255 - imgarr\n\n#Starting fresh we get... \nimg = scipy.misc.imread("image.jpg")\nimg = scipy.misc.imrotate(img, 330)\nimg = InverseImage(img)\nscipy.misc.imsave("image2.jpg", img)\n\n#Check out http://docs.scipy.org/doc/scipy/reference/misc.html for a complete listing.\n\n\n', 'user': 'apawlik'}, '125': {'fragment': 'def btrimmer(seqrecord):\n    \'\'\' This function takes a SeqRecord object containing fastq data and returns a Seq \n    object with low-quality bases  (bases with quality scores of 2 and below) \n    removed from the end of the read\'\'\'\n#   your code goes here\n    choppedsequence = seqrecord    #  This is a placeholder, it does not trim!\n    return choppedsequence\n\n#   This part opens a fastq file, goes through it record-by-record, calls btrimmer \n#   and writes fastq-formatted reuslts to standard out.\ngenerator = SeqIO.parse("data/tiny.fastq", "fastq")\nfor fastqsequence in generator:\n    choppedfastqsequence = btrimmer(fastqsequence)\n    sys.stdout.write(choppedfastqsequence.format("fastq"))\n\n', 'user': 'apawlik'}, '126': {'fragment': 'def sim_distance(prefs,person1,person2):\n  # Get the list of shared_items\n  si={}\n  for item in prefs[person1]: \n    if item in prefs[person2]: si[item]=1\n\n  # if they have no ratings in common, return 0\n  if len(si)==0: return 0\n\n  # Add up the squares of all the differences\n  sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],2) \n                      for item in prefs[person1] if item in prefs[person2]])\n\n  return 1/(1+sum_of_squares)\n\n# Returns the Pearson correlation coefficient for p1 and p2\n', 'user': 'apawlik'}, '127': {'fragment': 'def HappyGo_lucky():  \n   tten = aNumber * 10 # times ten\n   if tten< 60:\n         return 60\n   else:\n     return tten\n\n409\n\nprint HappyGo_lucky()\n\n', 'user': 'apawlik'}, '128': {'fragment': "    def __init__(self, start_lineno, end_lineno, text):\n        # int : The first line number in the block. 1-indexed.\n        self.start_lineno = start_lineno\n        # int : The last line number. Inclusive!\n        self.end_lineno = end_lineno\n        # str : The text block including '#' character but not any leading spaces.\n        self.text = text\n\n", 'user': 'DevasenaInupakutika'}, '129': {'fragment': 'def mangle_docstrings(app, what, name, obj, options, lines,\n                      reference_offset=[0]):\n\n    cfg = dict(use_plots=app.config.numpydoc_use_plots,\n               show_class_members=app.config.numpydoc_show_class_members)\n\n    if what == \'module\':\n        # Strip top title\n        title_re = re.compile(ur\'^\\s*[#*=]{4,}\\n[a-z0-9 -]+\\n[#*=]{4,}\\s*\',\n                              re.I|re.S)\n        lines[:] = title_re.sub(u\'\', u"\\n".join(lines)).split(u"\\n")\n    else:\n        doc = get_doc_object(obj, what, u"\\n".join(lines), config=cfg)\n        lines[:] = unicode(doc).split(u"\\n")\n\n', 'user': 'DevasenaInupakutika'}, '167': {'fragment': 'def mangle_docstrings(app, what, name, obj, options, lines,\n                      reference_offset=[0]):\n\n    cfg = dict(use_plots=app.config.numpydoc_use_plots,\n               show_class_members=app.config.numpydoc_show_class_members)\n\n    if what == \'module\':\n        # Strip top title\n        title_re = re.compile(ur\'^\\s*[#*=]{4,}\\n[a-z0-9 -]+\\n[#*=]{4,}\\s*\',\n                              re.I|re.S)\n        lines[:] = title_re.sub(u\'\', u"\\n".join(lines)).split(u"\\n")\n    else:\n        doc = get_doc_object(obj, what, u"\\n".join(lines), config=cfg)\n        lines[:] = unicode(doc).split(u"\\n")\n\n', 'user': 'apawlik'}, '118': {'fragment': 'def toFile(xs, filename):\n        f = open(filename, "w")\n        out = ""\n        for t in range(0, int(T/h)):\n                out+="%f %.16f\\n"%(t*h, xs[t])\n        f.write(out)\n        f.close()\n        return True\n        \n# rates\nR1v = [0]\nR2v = [0]\nR3v = [0]\nR4v = [0]\nR5v = [0]\n\n', 'user': 'dorchard'}, '59': {'fragment': '    def __init__(self, data):\n        """\n        Parameters\n        ----------\n        data : str\n           String with lines separated by \'\\n\'.\n\n        """\n        if isinstance(data,list):\n            self._str = data\n        else:\n            self._str = data.split(\'\\n\') # store string as list of lines\n\n        self.reset()\n\n', 'user': 'DevasenaInupakutika'}, '58': {'fragment': '    def __init__(self, data):\n        """\n        Parameters\n        ----------\n        data : str\n           String with lines separated by \'\\n\'.\n\n        """\n        if isinstance(data,list):\n            self._str = data\n        else:\n            self._str = data.split(\'\\n\') # store string as list of lines\n\n        self.reset()\n\n', 'user': 'apawlik'}, '55': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '54': {'fragment': 'def btrimmer(seqrecord):\n    \'\'\' This function takes a SeqRecord object containing fastq data and returns a Seq \n    object with low-quality bases  (bases with quality scores of 2 and below) \n    removed from the end of the read\'\'\'\n#   your code goes here\n    choppedsequence = seqrecord    #  This is a placeholder, it does not trim!\n    return choppedsequence\n\n#   This part opens a fastq file, goes through it record-by-record, calls btrimmer \n#   and writes fastq-formatted reuslts to standard out.\ngenerator = SeqIO.parse("data/tiny.fastq", "fastq")\nfor fastqsequence in generator:\n    choppedfastqsequence = btrimmer(fastqsequence)\n    sys.stdout.write(choppedfastqsequence.format("fastq"))\n\n', 'user': 'apawlik'}, '57': {'fragment': "def main():\n    script = sys.argv[0]\n    for filename in sys.argv[1:]:\n        data = np.loadtxt(filename, delimiter=',')\n        for m in data.mean(axis=1):\n            print m\n\nmain()\n\n", 'user': 'apawlik'}, '56': {'fragment': 'def calculate_gc(x):\n    """Calculates the GC content of DNA sequence x.\n    x: a string composed only of A\'s, T\'s, G\'s, and C\'s."""\n    x = x.upper()\n    return float(x.count(\'G\') + x.count(\'C\')) / (x.count(\'G\') + x.count(\'C\') + x.count(\'A\') + x.count(\'T\'))\n\n"""\nLonger exercise: Reading Cochlear implant into Python\n\nPart 1:\nWrite a function `view_cochlear` that will open the file and print out each line. The only input to the function should be the name of the file as a string. \n"""\n', 'user': 'apawlik'}, '51': {'fragment': 'def mean(numlist):\n    try :\n        total = sum(numlist)\n        length = len(numlist)\n    except TypeError :\n        raise TypeError("The list was not numbers.")\n    except :\n        print "Something unknown happened with the list."\n    return total/length\n\n', 'user': 'apawlik'}, '50': {'fragment': 'def reversecomplement(record):\n    \'\'\' This function takes a SeqRecord object and returns its \n    reverse complement\'\'\'\n#   your code goes here\n    reversecomplementsequence = "N" * len(record.seq)\n    return reversecomplementsequence \n\n\n#   Open a fastq file, goes through it record-by-record, and output\n#   the sequence id, the sequence, and the translations \ngenerator = SeqIO.parse("data/test-sequences.fasta", "fasta")\nfor seqrecord in generator:\n    reversesequence = reversecomplement(seqrecord)\n    print ">%s\\nORIG: %s" % (seqrecord.id, seqrecord.seq)\n    print "REVC: %s" % reversesequence\n\n', 'user': 'apawlik'}, '53': {'fragment': 'def toFile(xs, filename):\n        f = open(filename, "w")\n        out = ""\n        for t in range(0, int(T/h)):\n                out+="%f %.16f\\n"%(t*h, xs[t])\n        f.write(out)\n        f.close()\n        return True\n        \n# rates\nR1v = [0]\nR2v = [0]\nR3v = [0]\nR4v = [0]\nR5v = [0]\n\n', 'user': 'dorchard'}, '52': {'fragment': 'def complement(sequence):\n    """\n    Calculate the complementary sequence of a DNA sequence.\n\n    @param sequence: DNA sequence expressed as a lower-case string.\n    @return complementary sequence.\n    """\n    cdna = \'\'\n    try:\n        for ch in sequence:\n            cdna += COMPLEMENTS[ch]\n        return cdna\n    except TypeError:\n        raise ValueError(\'The input is not a sequence e.g. a string or list\')\n    except KeyError:\n        raise ValueError(\'The input is not a sequence of G,T,C,A\')\n\n', 'user': 'apawlik'}, '164': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '201': {'fragment': 'def toFile(xs, filename):\n        f = open(filename, "w")\n        out = ""\n        for t in range(0, int(T/h)):\n                out+="%f %.16f\\n"%(t*h, xs[t])\n        f.write(out)\n        f.close()\n        return True\n        \n# rates\nR1v = [0]\nR2v = [0]\nR3v = [0]\nR4v = [0]\nR5v = [0]\n\n', 'user': 'dorchard'}, '199': {'fragment': '    def __init__(self, cls, modulename=\'\', func_doc=SphinxFunctionDoc):\n        if not inspect.isclass(cls):\n            raise ValueError("Initialise using a class. Got %r" % cls)\n        self._cls = cls\n\n        if modulename and not modulename.endswith(\'.\'):\n            modulename += \'.\'\n        self._mod = modulename\n', 'user': 'apawlik'}, '179': {'fragment': 'def CrazyFunc(x):\n\treturn (scipy.special.i1(x) - 1)**3\n\nprint("Try integrating CrazyFunc on the range [-5, 10]...")\n\nval, err = scipy.integrate.quad(CrazyFunc, -5, 10)\n\nprint("A Crazy Function integrates to %.8E"%val)  \nprint("And with insanely low error of %.8E"%err)  \nprint("")\n\n#You can also use scipy.integrate.Inf for infinity in the limits of integration\nprint("Now try integrating e^x on [-inf, 0]")\nprint("(val, err) = " + str( scipy.integrate.quad(scipy.exp, -scipy.integrate.Inf, 0.0) ))\nprint("")\n\n#2D integrations follows similarly, \n', 'user': 'apawlik'}, '200': {'fragment': 'def InverseImage(imgarr):\n\treturn 255 - imgarr\n\n#Starting fresh we get... \nimg = scipy.misc.imread("image.jpg")\nimg = scipy.misc.imrotate(img, 330)\nimg = InverseImage(img)\nscipy.misc.imsave("image2.jpg", img)\n\n#Check out http://docs.scipy.org/doc/scipy/reference/misc.html for a complete listing.\n\n\n', 'user': 'DevasenaInupakutika'}, '195': {'fragment': 'def zip_install(url, sha1, install_directory):\n    """Download and install a zipped bundle of compiled software"""\n    r = _urlopen(url)\n    zip_bytes = r.read()\n    download_sha1 = hashlib.sha1(zip_bytes).hexdigest()\n    if download_sha1 != sha1:\n        raise ValueError(\n            \'downloaded {!r} has the wrong SHA1 hash: {} != {}\'.format(\n                url, downloaded_sha1, sha1))\n    zip_io = _BytesIO(zip_bytes)\n    zip_file = zipfile.ZipFile(zip_io)\n    if not os.path.isdir(install_directory):\n        os.makedirs(install_directory)\n        zip_file.extractall(install_directory)\n\n\n', 'user': 'apawlik'}, '194': {'fragment': 'def InverseImage(imgarr):\n\treturn 255 - imgarr\n\n#Starting fresh we get... \nimg = scipy.misc.imread("image.jpg")\nimg = scipy.misc.imrotate(img, 330)\nimg = InverseImage(img)\nscipy.misc.imsave("image2.jpg", img)\n\n#Check out http://docs.scipy.org/doc/scipy/reference/misc.html for a complete listing.\n\n\n', 'user': 'apawlik'}, '197': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '178': {'fragment': "def border(grid, color):\n    assert grid.width > 1, 'Must have at least two columns to draw border.'\n    assert grid.height > 1, 'Must have at least two rows to draw border.'\n\n    grid[0,  :] = color\n    grid[-1, :] = color\n    grid[:,  0] = color\n    grid[:, -1] = color\n\n", 'user': 'DevasenaInupakutika'}, '191': {'fragment': 'def toFile(xs, filename):\n        f = open(filename, "w")\n        out = ""\n        for t in range(0, int(T/h)):\n                out+="%f %.16f\\n"%(t, xs[t])\n        f.write(out)\n        f.close()\n        return True\n\n', 'user': 'dorchard'}, '190': {'fragment': "    def dictionary(self):\n        return pd.read_hdf(self.kwargs['dictionary'], key=self.input_key)\n\n\ndispatcher = Dispatcher()\ncommand = dispatcher.command\n\n\n@command()\n", 'user': 'dimazest'}, '193': {'fragment': 'def reversecomplement(record):\n    \'\'\' This function takes a SeqRecord object and returns its \n    reverse complement\'\'\'\n#   your code goes here\n    reversecomplementsequence = "N" * len(record.seq)\n    return reversecomplementsequence \n\n\n#   Open a fastq file, goes through it record-by-record, and output\n#   the sequence id, the sequence, and the translations \ngenerator = SeqIO.parse("data/test-sequences.fasta", "fasta")\nfor seqrecord in generator:\n    reversesequence = reversecomplement(seqrecord)\n    print ">%s\\nORIG: %s" % (seqrecord.id, seqrecord.seq)\n    print "REVC: %s" % reversesequence\n\n', 'user': 'apawlik'}, '192': {'fragment': 'def make_list_from_list_of_tuples(list_of_tuples,element):\n\n    output_list = []\n    for entry in list_of_tuples:\n        output_list.append(entry[element])\n        \n    return output_list\n        \n\n', 'user': 'janepipistrelle'}, '115': {'fragment': 'logger = logging.getLogger(__name__)\n\n\nclass Space(Mapping):\n    """A vector space.\n\n    :param data:\n    :param row_lables: the row labels\n    :param column_labels: the column labels\n\n    """\n', 'user': 'dimazest'}, '114': {'fragment': "def write(text, out=None):\n    '''Write output to a given stream (stdout by default).'''\n    out = out or sys.stdout\n    try:\n        print >> out, text\n    # Needed on Python 2.x if text is str/bytes containing non-ascii\n    # characters and sys.stdout is replaced by a writer from the codecs\n    # module. text will be decoded as ascii giving the decode error.\n    except UnicodeDecodeError:\n        print >> out, text.decode('utf-8')\n    # Get the order of stdout/stderr correct on Windows. AFAICT this is only\n    # needed for the test environment but it's harmless otherwise.\n    out.flush()\n\n\n", 'user': 'dimazest'}, '88': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'DevasenaInupakutika'}, '89': {'fragment': 'def sim_distance(prefs,person1,person2):\n  # Get the list of shared_items\n  si={}\n  for item in prefs[person1]: \n    if item in prefs[person2]: si[item]=1\n\n  # if they have no ratings in common, return 0\n  if len(si)==0: return 0\n\n  # Add up the squares of all the differences\n  sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],2) \n                      for item in prefs[person1] if item in prefs[person2]])\n\n  return 1/(1+sum_of_squares)\n\n# Returns the Pearson correlation coefficient for p1 and p2\n', 'user': 'DevasenaInupakutika'}, '111': {'fragment': '    def __init__(self, cls, modulename=\'\', func_doc=SphinxFunctionDoc):\n        if not inspect.isclass(cls):\n            raise ValueError("Initialise using a class. Got %r" % cls)\n        self._cls = cls\n\n        if modulename and not modulename.endswith(\'.\'):\n            modulename += \'.\'\n        self._mod = modulename\n', 'user': 'apawlik'}, '110': {'fragment': 'def unparse(ast, single_line_functions=False):\n    s = cStringIO.StringIO()\n    UnparseCompilerAst(ast, s, single_line_functions)\n    return s.getvalue().lstrip()\n\nop_precedence = { \'compiler.ast.Power\':3, \'compiler.ast.Mul\':2, \'compiler.ast.Div\':2,\n                  \'compiler.ast.Add\':1, \'compiler.ast.Sub\':1 }\n\nclass UnparseCompilerAst:\n    """ Methods in this class recursively traverse an AST and\n        output source code for the abstract syntax; original formatting\n        is disregarged.\n    """\n\n    #########################################################################\n    # object interface.\n    #########################################################################\n\n', 'user': 'DevasenaInupakutika'}, '113': {'fragment': 'def consume_stream(target, input_dir=None):\n    """Read lines from the standard input or files in a directory.\n\n    Behaves as a generator, should receive a .send() call to send a\n    line to the target.\n\n    """\n    file_names = get_file_names(input_dir) if input_dir else []\n\n    with contextlib.closing(fileinput.FileInput(file_names, openhook=fileinput.hook_compressed)) as lines:\n        with consumers.closing(target):\n\n            for line in lines:\n                result = target.send(line)\n\n                if result is not consumers.SendNext:\n                    yield result\n\n\n', 'user': 'dimazest'}, '112': {'fragment': 'def dynamic_array(size=1000000):\n    """Fills an array that is sized dynamically."""\n    dynamic = []\n    for i in range(size):\n        dynamic.append(random() * i)\n    return dynamic\n\n\n', 'user': 'DevasenaInupakutika'}, '82': {'fragment': 'def tidybib_action(source,target,env):\n    zoterobib=file(source[0].path)\n    targetbib=file(target[0].path,"w")\n    for line in zoterobib.readlines():\n        match=re.match("\\@(.*)\\{(.*),",line)\n        if match:\n            citetype=match.group(1)\n            label=match.group(2)\n            groups=re.match("(.*)_(.*)_(.*)",label)\n            author=groups.group(1)\n            title=groups.group(2)\n            year=groups.group(3)\n            if author=="":\n                author="anon"\n            if year=="????":\n                year="0000"\n            targetbib.write("@%s{%s_%s_%s,\\n"%(citetype,author,string.replace(title,":",""),year))\n        else:\n            targetbib.write(line)\n', 'user': 'jamespjh'}, '83': {'fragment': "def f(x):\n\treturn (7.0 + (1+x)**(4.0/3.0))**(1.0/3.0)\n\n#Through someone else's labors we know the expansion to be... \nf_exp = [2.0, 1.0/9.0, 1.0/81.0, -49.0/8748.0, 175.0/78732.0]\n\n#The Pade coefficients are given simply by, \np, q = scipy.misc.pade(f_exp, (5-1)/2)\n#p and q are of numpy's polynomial class\n#So the Pade approximation is given by \n", 'user': 'apawlik'}, '80': {'fragment': 'def extract_repeat_info_for_blast(ref_dir,ref_filename,primer_length,primer_dist,trf_dir,trf_output_dir,primer_prefix,first_primer_filename,second_primer_filename):\n\n    # Get the raw output from trf.\n    some_repeats = get_trf_output_from_fasta(ref_dir,ref_filename,primer_length,primer_dist,trf_dir,trf_output_dir)\n    \n    # Filter it so that overlapping regions are lumped together and output the primers in the format needed for bigs.\n    write_primers_for_repetitive_regions_to_file(ref_dir,ref_filename,some_repeats,primer_prefix,primer_length,primer_dist,first_primer_filename,second_primer_filename)\n\n\n#######################################################################\n\n\n', 'user': 'janepipistrelle'}, '81': {'fragment': "def main():\n    script = sys.argv[0]\n    action = sys.argv[1]\n    filenames = sys.argv[2:]\n    assert action in ['--min', '--mean', '--max'], \\\n           'Action is not one of --min, --mean, or --max: ' + action\n    for f in filenames:\n        process(f, action)\n\n", 'user': 'apawlik'}, '86': {'fragment': 'def InverseImage(imgarr):\n\treturn 255 - imgarr\n\n#Starting fresh we get... \nimg = scipy.misc.imread("image.jpg")\nimg = scipy.misc.imrotate(img, 330)\nimg = InverseImage(img)\nscipy.misc.imsave("image2.jpg", img)\n\n#Check out http://docs.scipy.org/doc/scipy/reference/misc.html for a complete listing.\n\n\n', 'user': 'apawlik'}, '87': {'fragment': "def f(x):\n\treturn (7.0 + (1+x)**(4.0/3.0))**(1.0/3.0)\n\n#Through someone else's labors we know the expansion to be... \nf_exp = [2.0, 1.0/9.0, 1.0/81.0, -49.0/8748.0, 175.0/78732.0]\n\n#The Pade coefficients are given simply by, \np, q = scipy.misc.pade(f_exp, (5-1)/2)\n#p and q are of numpy's polynomial class\n#So the Pade approximation is given by \n", 'user': 'apawlik'}, '84': {'fragment': '    def sqlite(self, filename, query):\n        connection = sqlite3.connect(filename)\n        cursor = connection.cursor()\n        try:\n            cursor.execute(query)\n            results = cursor.fetchall()\n            display(HTML(self.tablify(results)))\n        except Exception, e:\n            import sys\n            print >> sys.stderr, "exception", e\n        cursor.close()\n        connection.close()\n\n', 'user': 'apawlik'}, '85': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '198': {'fragment': "    def __init__(self, start_lineno, end_lineno, text):\n        # int : The first line number in the block. 1-indexed.\n        self.start_lineno = start_lineno\n        # int : The last line number. Inclusive!\n        self.end_lineno = end_lineno\n        # str : The text block including '#' character but not any leading spaces.\n        self.text = text\n\n", 'user': 'apawlik'}, '3': {'fragment': "def border(grid, color):\n    assert grid.width > 1, 'Must have at least two columns to draw border.'\n    assert grid.height > 1, 'Must have at least two rows to draw border.'\n\n    grid[0,  :] = color\n    grid[-1, :] = color\n    grid[:,  0] = color\n    grid[:, -1] = color\n\n", 'user': 'apawlik'}, '177': {'fragment': 'def test_mean1():\n    obs = mean([0, 0, 0, 0])\n    exp = 0\n    assert_equal(obs, exp)\n\n    obs = mean([0, 200])\n    exp = 100\n    assert_equal(obs, exp)\n\n    obs = mean([0, -200])\n    exp = -100\n    assert_equal(obs, exp)\n\n    obs = mean([0]) \n    exp = 0\n    assert_equal(obs, exp)\n\n', 'user': 'apawlik'}, '7': {'fragment': 'def get_sequence_names(line):\n        \tfields = line.rstrip("\\n").split("\\t")\n\t\tnames = []\n\t\tfor i in range(len(fields)):\n\t\t\tif i % 2 == 0:\n\t\t\t\tnames.append(fields[i])\n\t\treturn names\n\n', 'user': 'janepipistrelle'}, '108': {'fragment': 'def CrazyFunc(x):\n\treturn (scipy.special.i1(x) - 1)**3\n\nprint("Try integrating CrazyFunc on the range [-5, 10]...")\n\nval, err = scipy.integrate.quad(CrazyFunc, -5, 10)\n\nprint("A Crazy Function integrates to %.8E"%val)  \nprint("And with insanely low error of %.8E"%err)  \nprint("")\n\n#You can also use scipy.integrate.Inf for infinity in the limits of integration\nprint("Now try integrating e^x on [-inf, 0]")\nprint("(val, err) = " + str( scipy.integrate.quad(scipy.exp, -scipy.integrate.Inf, 0.0) ))\nprint("")\n\n#2D integrations follows similarly, \n', 'user': 'apawlik'}, '109': {'fragment': 'def reversecomplement(record):\n    \'\'\' This function takes a SeqRecord object and returns its \n    reverse complement\'\'\'\n#   your code goes here\n    reversecomplementsequence = "N" * len(record.seq)\n    return reversecomplementsequence \n\n\n#   Open a fastq file, goes through it record-by-record, and output\n#   the sequence id, the sequence, and the translations \ngenerator = SeqIO.parse("data/test-sequences.fasta", "fasta")\nfor seqrecord in generator:\n    reversesequence = reversecomplement(seqrecord)\n    print ">%s\\nORIG: %s" % (seqrecord.id, seqrecord.seq)\n    print "REVC: %s" % reversesequence\n\n', 'user': 'apawlik'}, '102': {'fragment': "def f(x):\n\treturn (7.0 + (1+x)**(4.0/3.0))**(1.0/3.0)\n\n#Through someone else's labors we know the expansion to be... \nf_exp = [2.0, 1.0/9.0, 1.0/81.0, -49.0/8748.0, 175.0/78732.0]\n\n#The Pade coefficients are given simply by, \np, q = scipy.misc.pade(f_exp, (5-1)/2)\n#p and q are of numpy's polynomial class\n#So the Pade approximation is given by \n", 'user': 'DevasenaInupakutika'}, '103': {'fragment': 'def test_mean1():\n    obs = mean([0, 0, 0, 0])\n    exp = 0\n    assert_equal(obs, exp)\n\n    obs = mean([0, 200])\n    exp = 100\n    assert_equal(obs, exp)\n\n    obs = mean([0, -200])\n    exp = -100\n    assert_equal(obs, exp)\n\n    obs = mean([0]) \n    exp = 0\n    assert_equal(obs, exp)\n\n', 'user': 'DevasenaInupakutika'}, '100': {'fragment': 'def enterweight():\n   weight = raw_input("Enter the sample weight (in agreed units): ")\n   sampleweight.append(int(weight))\n   print "Recorded sample number ",len(sampleweight)-1,"; the weigh recorded is ",  weight, " units."\n   return sampleweight\n\n#compareweight() compares weights of two selected samples\n#which indexes in sampleweight[] are passed as function arguments\n', 'user': 'apawlik'}, '101': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'DevasenaInupakutika'}, '106': {'fragment': 'def cause_segmentation_fault():\n    """Crashes the Python interpreter by segfaulting."""\n    i = ctypes.c_char(\'a\')\n    j = ctypes.pointer(i)\n    c = 0\n    while True:\n        j[c] = \'a\'\n        c += 1\n    return j\n\n', 'user': 'apawlik'}, '107': {'fragment': 'def unparse(ast, single_line_functions=False):\n    s = cStringIO.StringIO()\n    UnparseCompilerAst(ast, s, single_line_functions)\n    return s.getvalue().lstrip()\n\nop_precedence = { \'compiler.ast.Power\':3, \'compiler.ast.Mul\':2, \'compiler.ast.Div\':2,\n                  \'compiler.ast.Add\':1, \'compiler.ast.Sub\':1 }\n\nclass UnparseCompilerAst:\n    """ Methods in this class recursively traverse an AST and\n        output source code for the abstract syntax; original formatting\n        is disregarged.\n    """\n\n    #########################################################################\n    # object interface.\n    #########################################################################\n\n', 'user': 'apawlik'}, '104': {'fragment': 'def group(producer,\n          file_name_template=(\'t\', \'%Y-%m-%d-%H.gz\', \'\'),\n          ):\n    """Group tweets to files by date according to the template."""\n    producer(consumers.to_tweet(consumers.group(file_name_template)))\n\n\n@command()\n', 'user': 'dimazest'}, '105': {'fragment': "def assetpath(node,target,env):\n\text='.png'\n\t[base,current_ext]=os.path.splitext(env.GetBuildPath(node))\n\tif current_ext in ['.jpg','.svg','.tex','.pdf','.css','.latex','.html']:\n\t\text=current_ext\n\treturn os.path.join(target,\n\t\tos.path.basename(base)+ext)\n\n", 'user': 'jamespjh'}, '39': {'fragment': 'def downloadgbk(accessionno):\n    from Bio import Entrez\n    Entrez.email = "swc@example.com    # Tell NCBI who you are!\n    Entrez.tool = "SoftwareCarpentryBootcamp"\n\n    filename = "%s.gbk" % accessionno       \n    print "Trying efectch on %s, writing to %s" % ( accessionno, filename )\n    if not os.path.isfile(filename):  \n        net_handle = Entrez.efetch(db="nucleotide", id=accessionno, rettype="gb", retmode="text") \n        out_handle = open(filename, "w")\n        out_handle.write(net_handle.read()) \n        net_handle.close()\n        out_handle.close()\n    else:\n        print "skipping, %s already exists!" % filename\n\n', 'user': 'apawlik'}, '38': {'fragment': 'def readline_google_store(ngram_len, chunk_size=1024 ** 2, verbose=False):\n    """Iterate over the data in the Google ngram collectioin.\n\n        :param int ngram_len: the length of ngrams to be streamed.\n        :param int chunk_size: the size the chunks of raw compressed data.\n        :param bool verbose: if `True`, then the debug information is shown to\n        `sys.stderr`.\n\n        :returns: a iterator over triples `(fname, url, records)`\n\n    """\n\n    for fname, url, request in iter_google_store(ngram_len, verbose=verbose):\n        dec = zlib.decompressobj(32 + zlib.MAX_WBITS)\n\n', 'user': 'dimazest'}, '33': {'fragment': 'def mean(numlist):\n    try :\n        total = sum(numlist)\n        length = len(numlist)\n    except TypeError :\n        raise TypeError("The list was not numbers.")\n    except :\n        print "Something unknown happened with the list."\n    return total/length\n\n', 'user': 'apawlik'}, '32': {'fragment': 'def fetch_contigs(comid, contig_list):\n   for seq in assembly:\n     for contig in contig_list:\n       if seq.id.find(contig)!= -1:\n         outfile = "%s_%s.fa" % (comid,contig)\n         out = open(outfile, \'w\')\n         seq_out = ">%s_%r\\n%s" % (seq.id, len(str(seq.seq)), seq.seq)\n\t out.write(seq_out)\n         \n          \nfetch_contigs(args[\'comid\'],args[\'contig_list\'])\n\n', 'user': 'janepipistrelle'}, '31': {'fragment': 'def get_file_names(input_dir):\n    if input_dir:\n        file_names = sorted(chain.from_iterable((os.path.join(p, f) for f in fs) for p, _, fs in os.walk(input_dir)))\n    else:\n        file_names = []\n\n    for f in file_names:\n        yield f\n\n', 'user': 'dimazest'}, '30': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'DevasenaInupakutika'}, '37': {'fragment': 'def zip_install(url, sha1, install_directory):\n    """Download and install a zipped bundle of compiled software"""\n    r = _urlopen(url)\n    zip_bytes = r.read()\n    download_sha1 = hashlib.sha1(zip_bytes).hexdigest()\n    if download_sha1 != sha1:\n        raise ValueError(\n            \'downloaded {!r} has the wrong SHA1 hash: {} != {}\'.format(\n                url, downloaded_sha1, sha1))\n    zip_io = _BytesIO(zip_bytes)\n    zip_file = zipfile.ZipFile(zip_io)\n    if not os.path.isdir(install_directory):\n        os.makedirs(install_directory)\n        zip_file.extractall(install_directory)\n\n\n', 'user': 'DevasenaInupakutika'}, '36': {'fragment': 'def sim_distance(prefs,person1,person2):\n  # Get the list of shared_items\n  si={}\n  for item in prefs[person1]: \n    if item in prefs[person2]: si[item]=1\n\n  # if they have no ratings in common, return 0\n  if len(si)==0: return 0\n\n  # Add up the squares of all the differences\n  sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],2) \n                      for item in prefs[person1] if item in prefs[person2]])\n\n  return 1/(1+sum_of_squares)\n\n# Returns the Pearson correlation coefficient for p1 and p2\n', 'user': 'apawlik'}, '35': {'fragment': 'def calculate_weight(sequence):\n    """\n    Calculate the molecular weight of a DNA sequence.\n\n    @param sequence: DNA sequence expressed as an upper-case string.\n    @return molecular weight.\n    """\n    weight = 0.0\n    for ch in sequence:\n        weight += NUCLEOTIDES[ch]\n    return weight\n\n', 'user': 'apawlik'}, '34': {'fragment': 'def HappyGo_lucky():  \n   tten = aNumber * 10 # times ten\n   if tten< 60:\n         return 60\n   else:\n     return tten\n\n409\n\nprint HappyGo_lucky()\n\n', 'user': 'apawlik'}, '176': {'fragment': 'def zip_install(url, sha1, install_directory):\n    """Download and install a zipped bundle of compiled software"""\n    r = _urlopen(url)\n    zip_bytes = r.read()\n    download_sha1 = hashlib.sha1(zip_bytes).hexdigest()\n    if download_sha1 != sha1:\n        raise ValueError(\n            \'downloaded {!r} has the wrong SHA1 hash: {} != {}\'.format(\n                url, downloaded_sha1, sha1))\n    zip_io = _BytesIO(zip_bytes)\n    zip_file = zipfile.ZipFile(zip_io)\n    if not os.path.isdir(install_directory):\n        os.makedirs(install_directory)\n        zip_file.extractall(install_directory)\n\n\n', 'user': 'apawlik'}, '60': {'fragment': "def check():\n    if _sys.version_info < (2, 6):\n        print('check for Python version (python):')\n        print('outdated version of Python: ' + _sys.version)\n        return False\n    return True\n\n\n", 'user': 'DevasenaInupakutika'}, '61': {'fragment': "def unigram_indices():\n    return set(\n        '0 1 2 3 4 5 6 7 8 9 a b c d e f g h i j k l m n o other p pos '\n        'punctuation q r s t u v w x y z'.split(' ')\n    )\n\n\n@pytest.fixture\n", 'user': 'dimazest'}, '62': {'fragment': "def download(url,thumbsize):\n    fd = urllib.urlopen(url)\n    im= Image.open(io.BytesIO(fd.read()))\n    im.thumbnail((thumbsize,thumbsize),Image.ANTIALIAS)\n    im = im.convert('RGBA')\n    return im\n\n# Now we have each image, composite them into a ring\n\n", 'user': 'jamespjh'}, '63': {'fragment': 'def extract_repeat_info_for_blast(ref_dir,ref_filename,primer_length,primer_dist,trf_dir,trf_output_dir,primer_prefix,first_primer_filename,second_primer_filename):\n\n    # Get the raw output from trf.\n    some_repeats = get_trf_output_from_fasta(ref_dir,ref_filename,primer_length,primer_dist,trf_dir,trf_output_dir)\n    \n    # Filter it so that overlapping regions are lumped together and output the primers in the format needed for bigs.\n    write_primers_for_repetitive_regions_to_file(ref_dir,ref_filename,some_repeats,primer_prefix,primer_length,primer_dist,first_primer_filename,second_primer_filename)\n\n\n#######################################################################\n\n\n', 'user': 'janepipistrelle'}, '64': {'fragment': 'def calculate_gc(x):\n    """Calculates the GC content of DNA sequence x.\n    x: a string composed only of A\'s, T\'s, G\'s, and C\'s."""\n    x = x.upper()\n    return float(x.count(\'G\') + x.count(\'C\')) / (x.count(\'G\') + x.count(\'C\') + x.count(\'A\') + x.count(\'T\'))\n\n"""\nLonger exercise: Reading Cochlear implant into Python\n\nPart 1:\nWrite a function `view_cochlear` that will open the file and print out each line. The only input to the function should be the name of the file as a string. \n"""\n', 'user': 'apawlik'}, '65': {'fragment': 'def test_mean1():\n    obs = mean([0, 0, 0, 0])\n    exp = 0\n    assert_equal(obs, exp)\n\n    obs = mean([0, 200])\n    exp = 100\n    assert_equal(obs, exp)\n\n    obs = mean([0, -200])\n    exp = -100\n    assert_equal(obs, exp)\n\n    obs = mean([0]) \n    exp = 0\n    assert_equal(obs, exp)\n\n', 'user': 'apawlik'}, '66': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '67': {'fragment': 'def reversecomplement(record):\n    \'\'\' This function takes a SeqRecord object and returns its \n    reverse complement\'\'\'\n#   your code goes here\n    reversecomplementsequence = "N" * len(record.seq)\n    return reversecomplementsequence \n\n\n#   Open a fastq file, goes through it record-by-record, and output\n#   the sequence id, the sequence, and the translations \ngenerator = SeqIO.parse("data/test-sequences.fasta", "fasta")\nfor seqrecord in generator:\n    reversesequence = reversecomplement(seqrecord)\n    print ">%s\\nORIG: %s" % (seqrecord.id, seqrecord.seq)\n    print "REVC: %s" % reversesequence\n\n', 'user': 'apawlik'}, '68': {'fragment': 'def sim_distance(prefs,person1,person2):\n  # Get the list of shared_items\n  si={}\n  for item in prefs[person1]: \n    if item in prefs[person2]: si[item]=1\n\n  # if they have no ratings in common, return 0\n  if len(si)==0: return 0\n\n  # Add up the squares of all the differences\n  sum_of_squares=sum([pow(prefs[person1][item]-prefs[person2][item],2) \n                      for item in prefs[person1] if item in prefs[person2]])\n\n  return 1/(1+sum_of_squares)\n\n# Returns the Pearson correlation coefficient for p1 and p2\n', 'user': 'apawlik'}, '69': {'fragment': "def main():\n    script = sys.argv[0]\n    filename = sys.argv[1]\n    data = np.loadtxt(filename, delimiter=',')\n    for m in data.mean(axis=1):\n        print m\n\nmain()\n\n", 'user': 'apawlik'}, '175': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '174': {'fragment': "def main():\n    script = sys.argv[0]\n    action = sys.argv[1]\n    filenames = sys.argv[2:]\n    assert action in ['--min', '--mean', '--max'], \\\n           'Action is not one of --min, --mean, or --max: ' + action\n    if len(filenames) == 0:\n        process(sys.stdin, action)\n    else:\n        for f in filenames:\n            process(f, action)\n\n", 'user': 'apawlik'}, '173': {'fragment': 'def conway(population, generations=100):\n    """Runs Conway\'s game of life on an initial population."""\n    population = set(population)\n    for i in range(generations):\n        population = evolve(population)\n    return list(population) \n\n\n', 'user': 'apawlik'}, '172': {'fragment': 'def InverseImage(imgarr):\n\treturn 255 - imgarr\n\n#Starting fresh we get... \nimg = scipy.misc.imread("image.jpg")\nimg = scipy.misc.imrotate(img, 330)\nimg = InverseImage(img)\nscipy.misc.imsave("image2.jpg", img)\n\n#Check out http://docs.scipy.org/doc/scipy/reference/misc.html for a complete listing.\n\n\n', 'user': 'apawlik'}, '171': {'fragment': 'def add_slash(a_string):\n\n    if (len(a_string)==0):\n        return a_string\n        \n    if (a_string[-1]!="/"):\n        a_string = a_string + "/"\n        \n    return a_string\n\n\n# Remove all instances of the given character from the given string.\n', 'user': 'janepipistrelle'}, '170': {'fragment': 'def make_data(intercept, tempslope, rainfallslope, numyears):\n    years = np.arange(2010 - numyears, 2011)\n    temps = np.random.uniform(70, 90, len(years))\n    rainfalls = np.random.uniform(100, 300, len(years))\n    noise = 2 * np.random.randn(len(years))\n    mosquitos = intercept + tempslope * temps + rainfallslope * rainfalls + noise\n    return zip(years, temps, rainfalls, mosquitos)\n\n', 'user': 'apawlik'}, '203': {'fragment': 'def btrimmer(seqrecord):\n    \'\'\' This function takes a SeqRecord object containing fastq data and returns a Seq \n    object with low-quality bases  (bases with quality scores of 2 and below) \n    removed from the end of the read\'\'\'\n#   your code goes here\n    choppedsequence = seqrecord    #  This is a placeholder, it does not trim!\n    return choppedsequence\n\n#   This part opens a fastq file, goes through it record-by-record, calls btrimmer \n#   and writes fastq-formatted reuslts to standard out.\ngenerator = SeqIO.parse("data/tiny.fastq", "fastq")\nfor fastqsequence in generator:\n    choppedfastqsequence = btrimmer(fastqsequence)\n    sys.stdout.write(choppedfastqsequence.format("fastq"))\n\n', 'user': 'apawlik'}, '181': {'fragment': "def check():\n    if _sys.version_info < (2, 6):\n        print('check for Python version (python):')\n        print('outdated version of Python: ' + _sys.version)\n        return False\n    return True\n\n\n", 'user': 'apawlik'}, '182': {'fragment': 'def downloadgbk(accessionno):\n    from Bio import Entrez\n    Entrez.email = "swc@example.com    # Tell NCBI who you are!\n    Entrez.tool = "SoftwareCarpentryBootcamp"\n\n    filename = "%s.gbk" % accessionno       \n    print "Trying efectch on %s, writing to %s" % ( accessionno, filename )\n    if not os.path.isfile(filename):  \n        net_handle = Entrez.efetch(db="nucleotide", id=accessionno, rettype="gb", retmode="text") \n        out_handle = open(filename, "w")\n        out_handle.write(net_handle.read()) \n        net_handle.close()\n        out_handle.close()\n    else:\n        print "skipping, %s already exists!" % filename\n\n', 'user': 'apawlik'}, '183': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '180': {'fragment': 'def sum(\n    number=(\'n\', 5, \'An interger.\'),\n    other=(\'\', 1, \'Another interger.\'),\n):\n    """Sum two integers."""\n    print number + other\n\n\n@opster.command()\n', 'user': 'dimazest'}, '2': {'fragment': 'def HappyGo_lucky():  \n   tten = aNumber * 10 # times ten\n   if tten< 60:\n         return 60\n   else:\n     return tten\n\n409\n\nprint HappyGo_lucky()\n\n', 'user': 'DevasenaInupakutika'}, '162': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'DevasenaInupakutika'}, '187': {'fragment': 'def dynamic_array(size=1000000):\n    """Fills an array that is sized dynamically."""\n    dynamic = []\n    for i in range(size):\n        dynamic.append(random() * i)\n    return dynamic\n\n\n', 'user': 'apawlik'}, '184': {'fragment': "def build_cooccurrence_matrix(dispatcher, cooccurrence_dir_path, store_path, context_path, targets_path):\n    assert dispatcher.dispatch(\n        'google-ngrams cooccurrence '\n        '--context {context_path} '\n        '--targets {targets_path} '\n        '-i {cooccurrence_dir_path} '\n        '-o {output_path} '\n        ''.format(\n            context_path=context_path,\n            cooccurrence_dir_path=cooccurrence_dir_path,\n            output_path=store_path,\n            targets_path=targets_path,\n        ).split()\n    ) != -1\n\n\n@given('I select wordsim353 tokens as targets')\n", 'user': 'dimazest'}, '6': {'fragment': '    def __init__(self, metadata_filename):\n        """\n        Turns the CSV file into a dictionary mapping Switchboard\n        conversation_no integers values to dictionaries of values. All\n        the keys correspond to the column names in the original\n        tables.\n\n        Argument:\n\n        metadata_filename (str) -- the CSV file swda-metadata.csv\n        (should be in the main folder of the swda directory)\n        """\n        self.metadata_filename = metadata_filename\n        self.metadata = {}\n        self.get_metadata()\n\n', 'user': 'dimazest'}, '186': {'fragment': 'def detect_fasta(filename):\n\n    the_file = open(filename,\'r\')\n    for line in the_file:\n        if line[0]==">":\n            return True\n            \n    return False\n\n\n', 'user': 'janepipistrelle'}, '188': {'fragment': 'def CrazyFunc(x):\n\treturn (scipy.special.i1(x) - 1)**3\n\nprint("Try integrating CrazyFunc on the range [-5, 10]...")\n\nval, err = scipy.integrate.quad(CrazyFunc, -5, 10)\n\nprint("A Crazy Function integrates to %.8E"%val)  \nprint("And with insanely low error of %.8E"%err)  \nprint("")\n\n#You can also use scipy.integrate.Inf for infinity in the limits of integration\nprint("Now try integrating e^x on [-inf, 0]")\nprint("(val, err) = " + str( scipy.integrate.quad(scipy.exp, -scipy.integrate.Inf, 0.0) ))\nprint("")\n\n#2D integrations follows similarly, \n', 'user': 'apawlik'}, '189': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '202': {'fragment': "def main():\n    script = sys.argv[0]\n    filename = sys.argv[1]\n    data = np.loadtxt(filename, delimiter=',')\n    for m in data.mean(axis=1):\n        print m\n\nmain()\n\n", 'user': 'apawlik'}, '196': {'fragment': "def main():\n    script = sys.argv[0]\n    action = sys.argv[1]\n    filenames = sys.argv[2:]\n    assert action in ['--min', '--mean', '--max'], \\\n           'Action is not one of --min, --mean, or --max: ' + action\n    if len(filenames) == 0:\n        process(sys.stdin, action)\n    else:\n        for f in filenames:\n            process(f, action)\n\n", 'user': 'apawlik'}, '185': {'fragment': 'def toFile(xs, filename):\n        f = open(filename, "w")\n        out = ""\n        for t in range(0, int(T/h)):\n                out+="%f %.16f\\n"%(t, xs[t])\n        f.write(out)\n        f.close()\n        return True\n\n', 'user': 'dorchard'}, '99': {'fragment': 'def CrazyFunc(x):\n\treturn (scipy.special.i1(x) - 1)**3\n\nprint("Try integrating CrazyFunc on the range [-5, 10]...")\n\nval, err = scipy.integrate.quad(CrazyFunc, -5, 10)\n\nprint("A Crazy Function integrates to %.8E"%val)  \nprint("And with insanely low error of %.8E"%err)  \nprint("")\n\n#You can also use scipy.integrate.Inf for infinity in the limits of integration\nprint("Now try integrating e^x on [-inf, 0]")\nprint("(val, err) = " + str( scipy.integrate.quad(scipy.exp, -scipy.integrate.Inf, 0.0) ))\nprint("")\n\n#2D integrations follows similarly, \n', 'user': 'apawlik'}, '98': {'fragment': 'def replace_whitespace(s, d):\n  foo = s.replace(" ", d);\n  return foo\n\n# STEP 2 - output the new column names generated by running your replace_whitespace function\n# BONUS - trim any leading (at the front of the string) or trailing (at the end) whitespace characters from each column name before you call your replace_whitespace function\nfor name in col_names:\n  print replace_whitespace(name.lstrip(), "_")\n\n# STEP 3 - Using the shell:\n# (a) write ONLY the new non-whitespace column names to a new file called columnNames instead of to stdout\n# (b) similarly, sort the outputted column names into a new file called sortedColumnNames\n\n# Push the following files to Aleksandra\'s github: this file containing the fixed code, file with the column names with spaces removed, and the file with the sorted names\n# This will raise a pull request, so we can check your script!\n\n\n', 'user': 'apawlik'}, '168': {'fragment': 'def conway(population, generations=100):\n    """Runs Conway\'s game of life on an initial population."""\n    population = set(population)\n    for i in range(generations):\n        population = evolve(population)\n    return list(population) \n\n\n', 'user': 'apawlik'}, '169': {'fragment': "def check():\n    if _sys.version_info < (2, 6):\n        print('check for Python version (python):')\n        print('outdated version of Python: ' + _sys.version)\n        return False\n    return True\n\n\n", 'user': 'apawlik'}, '91': {'fragment': "def wget_each_url(target,source,env):\n    data=yaml.load(open(source[0].path))\n    for target,source in zip(target,data.values()):\n        content=urllib.urlopen(source)\n        result=open(target.path,'w')\n        result.write(content.read())\n        result.close()\n\n", 'user': 'jamespjh'}, '90': {'fragment': '    def space(self):\n        # TODO: this is depricated, SpaceMixin should be used, and\n        # global__matrix should be renamed to global__space.\n        return read_space_from_file(self.matrix)\n\n\ndispatcher = Dispatcher()\ncommand = dispatcher.command\n\n\n@command()\n', 'user': 'dimazest'}, '93': {'fragment': 'def downloadgbk(accessionno):\n    from Bio import Entrez\n    Entrez.email = "swc@example.com    # Tell NCBI who you are!\n    Entrez.tool = "SoftwareCarpentryBootcamp"\n\n    filename = "%s.gbk" % accessionno       \n    print "Trying efectch on %s, writing to %s" % ( accessionno, filename )\n    if not os.path.isfile(filename):  \n        net_handle = Entrez.efetch(db="nucleotide", id=accessionno, rettype="gb", retmode="text") \n        out_handle = open(filename, "w")\n        out_handle.write(net_handle.read()) \n        net_handle.close()\n        out_handle.close()\n    else:\n        print "skipping, %s already exists!" % filename\n\n', 'user': 'apawlik'}, '92': {'fragment': "def main():\n    script = sys.argv[0]\n    action = sys.argv[1]\n    filenames = sys.argv[2:]\n    assert action in ['--min', '--mean', '--max'], \\\n           'Action is not one of --min, --mean, or --max: ' + action\n    if len(filenames) == 0:\n        process(sys.stdin, action)\n    else:\n        for f in filenames:\n            process(f, action)\n\n", 'user': 'apawlik'}, '95': {'fragment': "    def __init__(self, start_lineno, end_lineno, text):\n        # int : The first line number in the block. 1-indexed.\n        self.start_lineno = start_lineno\n        # int : The last line number. Inclusive!\n        self.end_lineno = end_lineno\n        # str : The text block including '#' character but not any leading spaces.\n        self.text = text\n\n", 'user': 'apawlik'}, '94': {'fragment': 'def HappyGo_lucky():  \n   tten = aNumber * 10 # times ten\n   if tten< 60:\n         return 60\n   else:\n     return tten\n\n409\n\nprint HappyGo_lucky()\n\n', 'user': 'apawlik'}, '97': {'fragment': '    def sqlite(self, filename, query):\n        connection = sqlite3.connect(filename)\n        cursor = connection.cursor()\n        try:\n            cursor.execute(query)\n            results = cursor.fetchall()\n            display(HTML(self.tablify(results)))\n        except Exception, e:\n            import sys\n            print >> sys.stderr, "exception", e\n        cursor.close()\n        connection.close()\n\n', 'user': 'apawlik'}, '96': {'fragment': '    def __init__(self, cls, modulename=\'\', func_doc=SphinxFunctionDoc):\n        if not inspect.isclass(cls):\n            raise ValueError("Initialise using a class. Got %r" % cls)\n        self._cls = cls\n\n        if modulename and not modulename.endswith(\'.\'):\n            modulename += \'.\'\n        self._mod = modulename\n', 'user': 'apawlik'}, '11': {'fragment': 'def swda_education_region():\n    """Create a count dictionary relating education and region."""    \n    d = defaultdict(int)\n    corpus = CorpusReader(\'swda\')\n    # Iterate throught the transcripts; display_progress=True tracks progress:\n    for trans in corpus.iter_transcripts(display_progress=True):\n        d[(trans.from_caller_education, trans.from_caller_dialect_area)] += 1\n        d[(trans.to_caller_education, trans.to_caller_dialect_area)] += 1\n    # Turn d into a list of tuples as d.items(), sort it based on the\n    # second (index 1 member) of those tuples, largest first, and\n    # print out the results:\n    for key, val in sorted(d.items(), key=itemgetter(1), reverse=True):\n        print key, val\n\n# swda_education_region()\n\n######################################################################\n\n', 'user': 'dimazest'}, '10': {'fragment': 'def btrimmer(seqrecord):\n    \'\'\' This function takes a SeqRecord object containing fastq data and returns a Seq \n    object with low-quality bases  (bases with quality scores of 2 and below) \n    removed from the end of the read\'\'\'\n#   your code goes here\n    choppedsequence = seqrecord    #  This is a placeholder, it does not trim!\n    return choppedsequence\n\n#   This part opens a fastq file, goes through it record-by-record, calls btrimmer \n#   and writes fastq-formatted reuslts to standard out.\ngenerator = SeqIO.parse("data/tiny.fastq", "fastq")\nfor fastqsequence in generator:\n    choppedfastqsequence = btrimmer(fastqsequence)\n    sys.stdout.write(choppedfastqsequence.format("fastq"))\n\n', 'user': 'DevasenaInupakutika'}, '13': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '12': {'fragment': 'def unparse(ast, single_line_functions=False):\n    s = cStringIO.StringIO()\n    UnparseCompilerAst(ast, s, single_line_functions)\n    return s.getvalue().lstrip()\n\nop_precedence = { \'compiler.ast.Power\':3, \'compiler.ast.Mul\':2, \'compiler.ast.Div\':2,\n                  \'compiler.ast.Add\':1, \'compiler.ast.Sub\':1 }\n\nclass UnparseCompilerAst:\n    """ Methods in this class recursively traverse an AST and\n        output source code for the abstract syntax; original formatting\n        is disregarged.\n    """\n\n    #########################################################################\n    # object interface.\n    #########################################################################\n\n', 'user': 'apawlik'}, '15': {'fragment': 'def reversecomplement(record):\n    \'\'\' This function takes a SeqRecord object and returns its \n    reverse complement\'\'\'\n#   your code goes here\n    reversecomplementsequence = "N" * len(record.seq)\n    return reversecomplementsequence \n\n\n#   Open a fastq file, goes through it record-by-record, and output\n#   the sequence id, the sequence, and the translations \ngenerator = SeqIO.parse("data/test-sequences.fasta", "fasta")\nfor seqrecord in generator:\n    reversesequence = reversecomplement(seqrecord)\n    print ">%s\\nORIG: %s" % (seqrecord.id, seqrecord.seq)\n    print "REVC: %s" % reversesequence\n\n', 'user': 'DevasenaInupakutika'}, '14': {'fragment': 'def main(args):\n  executor = MacTool()\n  exit_code = executor.Dispatch(args)\n  if exit_code is not None:\n    sys.exit(exit_code)\n\n\nclass MacTool(object):\n  """This class performs all the Mac tooling steps. The methods can either be\n  executed directly, or dispatched from an argument list."""\n\n', 'user': 'bmpvieira'}, '17': {'fragment': 'def test_bad_boids_regression():\n    regression_data=yaml.load(open(os.path.join(os.path.dirname(__file__),\'fixture.yml\')))\n    boid_data=regression_data["before"]\n    update_boids(boid_data)\n    for after,before in zip(regression_data["after"],boid_data):\n        for after_value,before_value in zip(after,before): \n            assert_almost_equal(after_value,before_value,delta=0.01)\n\t\n\n', 'user': 'jamespjh'}, '16': {'fragment': "    def __init__(self, *globaloptions):\n        globaloptions = (\n            tuple(globaloptions) +\n            (\n                ('l', 'limit', 0, 'Limit the number of utterances by this value.'),\n                ('p', 'path', './swda', 'The path to the swda dir.'),\n            )\n        )\n\n        super(Dispatcher, self).__init__(\n            globaloptions=globaloptions,\n            middleware=_middleware,\n        )\n\n\n", 'user': 'dimazest'}, '19': {'fragment': "def main(filenames):\n    print HEADER\n    for f in filenames:\n        with open(f, 'r') as reader:\n            for line in reader:\n                display(f, line)\n    print FOOTER\n\n", 'user': 'apawlik'}, '18': {'fragment': 'def test_mean1():\n    obs = mean([0, 0, 0, 0])\n    exp = 0\n    assert_equal(obs, exp)\n\n    obs = mean([0, 200])\n    exp = 100\n    assert_equal(obs, exp)\n\n    obs = mean([0, -200])\n    exp = -100\n    assert_equal(obs, exp)\n\n    obs = mean([0]) \n    exp = 0\n    assert_equal(obs, exp)\n\n', 'user': 'apawlik'}, '117': {'fragment': "    def __init__(self):\n        global_option_prefix = 'global__'\n        global_names = [g for g in dir(self) if g.startswith(global_option_prefix)]\n        global_params = {g[len(global_option_prefix):]: getattr(self, g) for g in global_names}\n        globaloptions = [(short, name, default, help) for name, (short, default, help) in global_params.items()]\n\n        super().__init__(\n            globaloptions=globaloptions,\n            middleware=self._middleware,\n        )\n\n", 'user': 'dimazest'}, '116': {'fragment': 'def read_tokens(f_name):\n    """Read the series of tokens in a one column csv file."""\n    return pd.read_csv(\n        f_name,\n        names=(\'ngram\', ),\n        index_col=\'ngram\',\n        encoding=\'utf8\',\n        delim_whitespace=True,\n        quoting=csv.QUOTE_NONE,\n    )\n\n\n', 'user': 'dimazest'}, '151': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '150': {'fragment': 'def calculate_gc(x):\n    """Calculates the GC content of DNA sequence x.\n    x: a string composed only of A\'s, T\'s, G\'s, and C\'s."""\n    x = x.upper()\n    return float(x.count(\'G\') + x.count(\'C\')) / (x.count(\'G\') + x.count(\'C\') + x.count(\'A\') + x.count(\'T\'))\n\n"""\nLonger exercise: Reading Cochlear implant into Python\n\nPart 1:\nWrite a function `view_cochlear` that will open the file and print out each line. The only input to the function should be the name of the file as a string. \n"""\n', 'user': 'apawlik'}, '153': {'fragment': "def main(filenames):\n    print HEADER\n    for f in filenames:\n        with open(f, 'r') as reader:\n            for line in reader:\n                display(f, line)\n    print FOOTER\n\n", 'user': 'apawlik'}, '152': {'fragment': "def main():\n    script = sys.argv[0]\n    action = sys.argv[1]\n    filenames = sys.argv[2:]\n    assert action in ['--min', '--mean', '--max'], \\\n           'Action is not one of --min, --mean, or --max: ' + action\n    for f in filenames:\n        process(f, action)\n\n", 'user': 'apawlik'}, '155': {'fragment': 'def readline_folder(\n    path=(\'p\', \'.\', \'The folder to read files from.\'),\n    limit=(\'l\', 0, \'Home many lines to show, 0 shows all.\'),\n):\n    """Concatinate files in the folder and print them.\n\n    Files might be compressed.\n\n    """\n    limit = limit or None\n\n    with io_readline_folder(path) as lines:\n        lines = islice(lines, limit)\n\n        for line in lines:\n            print(line.strip())\n\n\n@command()\n', 'user': 'dimazest'}, '154': {'fragment': 'def mean(numlist):\n    try :\n        total = sum(numlist)\n        length = len(numlist)\n    except TypeError :\n        raise TypeError("The list was not numbers.")\n    except :\n        print "Something unknown happened with the list."\n    return total/length\n\n', 'user': 'DevasenaInupakutika'}, '157': {'fragment': 'def cause_segmentation_fault():\n    """Crashes the Python interpreter by segfaulting."""\n    i = ctypes.c_char(\'a\')\n    j = ctypes.pointer(i)\n    c = 0\n    while True:\n        j[c] = \'a\'\n        c += 1\n    return j\n\n', 'user': 'apawlik'}, '156': {'fragment': "def strip_stop_codons(f):\n  '''opens alignment file and strips terminal stop codon from each sequence. writes stripped alignments to original file'''\n  if os.stat(f).st_size > 0: #check file size in bytes\n    aln = AlignIO.read(f, 'fasta')\n    for i in aln:\n       i.seq = i.seq[:-3]\n    AlignIO.write(f, aln, 'fasta')\n\n", 'user': 'janepipistrelle'}, '159': {'fragment': 'def test_mean1():\n    obs = mean([0, 0, 0, 0])\n    exp = 0\n    assert_equal(obs, exp)\n\n    obs = mean([0, 200])\n    exp = 100\n    assert_equal(obs, exp)\n\n    obs = mean([0, -200])\n    exp = -100\n    assert_equal(obs, exp)\n\n    obs = mean([0]) \n    exp = 0\n    assert_equal(obs, exp)\n\n', 'user': 'apawlik'}, '158': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '48': {'fragment': 'def conway(population, generations=100):\n    """Runs Conway\'s game of life on an initial population."""\n    population = set(population)\n    for i in range(generations):\n        population = evolve(population)\n    return list(population) \n\n\n', 'user': 'apawlik'}, '49': {'fragment': "def main():\n    script = sys.argv[0]\n    for filename in sys.argv[1:]:\n        data = np.loadtxt(filename, delimiter=',')\n        for m in data.mean(axis=1):\n            print m\n\nmain()\n\n", 'user': 'apawlik'}, '46': {'fragment': 'def download(\n    ngram_len=(\'n\', 1, \'The length of ngrams to be downloaded.\'),\n    output=(\'o\', \'downloads/google_ngrams/{ngram_len}\', \'The destination folder for downloaded files.\'),\n    verbose=(\'v\', False, \'Be verbose.\'),\n):\n    """Download The Google Books Ngram Viewer dataset version 20120701."""\n    output = local(output.format(ngram_len=ngram_len))\n    output.ensure_dir()\n\n    for fname, url, request in iter_google_store(ngram_len, verbose=verbose):\n        with output.join(fname).open(\'wb\') as f:\n            for num, chunk in enumerate(request.iter_content(1024)):\n                if verbose and not divmod(num, 1024)[1]:\n                    sys.stderr.write(\'.\')\n                    sys.stderr.flush()\n                f.write(chunk)\n\n\n@command()\n', 'user': 'dimazest'}, '47': {'fragment': 'def load_cooccurrence_matrix(store, matrix_type=csc_matrix):\n    """Load a co-occurrence matrix from a store."""\n\n    ij = np.vstack((\n        store[\'row_ids\'].values,\n        store[\'col_ids\'].values,\n    ))\n\n    matrix = matrix_type((\n        store[\'data\'].values,\n        ij,\n    ))\n\n    return matrix\n\n\n', 'user': 'dimazest'}, '44': {'fragment': 'def tweets():\n    return (\n        r\'\'\'{"created_at":"Fri Apr 13 13:55:02 +0000 2012","id":190800262909276162,"id_str":"190800262909276162","text":"pinkpop pukkelpop paaspop prilpop pedropicopop all use #pp12 :)","source":"\\u003ca href=\\"http:\\/\\/itunes.apple.com\\/us\\/app\\/twitter\\/id409789998?mt=12\\" rel=\\"nofollow\\"\\u003eTwitter for Mac\\u003c\\/a\\u003e","truncated":false,"in_reply_to_status_id":null,"in_reply_to_status_id_str":null,"in_reply_to_user_id":null,"in_reply_to_user_id_str":null,"in_reply_to_screen_name":null,"user":{"id":10868922,"id_str":"10868922","name":"dimazest","screen_name":"dimazest","location":"Groningen, The Netherlands","description":"","url":"http:\\/\\/zest.id.lv","protected":false,"followers_count":181,"friends_count":236,"listed_count":9,"created_at":"Wed Dec 05 12:33:22 +0000 2007","favourites_count":52,"utc_offset":3600,"time_zone":"Rome","geo_enabled":true,"verified":false,"statuses_count":1192,"lang":"en","contributors_enabled":false,"is_translator":false,"profile_background_color":"709397","profile_background_image_url":"http:\\/\\/a0.twimg.com\\/images\\/themes\\/theme6\\/bg.gif","profile_background_image_url_https":"https:\\/\\/si0.twimg.com\\/images\\/themes\\/theme6\\/bg.gif","profile_background_tile":false,"profile_image_url":"http:\\/\\/a0.twimg.com\\/profile_images\\/1413931957\\/IMG_2219_normal.jpg","profile_image_url_https":"https:\\/\\/si0.twimg.com\\/profile_images\\/1413931957\\/IMG_2219_normal.jpg","profile_link_color":"FF3300","profile_sidebar_border_color":"86A4A6","profile_sidebar_fill_color":"A0C5C7","profile_text_color":"333333","profile_use_background_image":true,"show_all_inline_media":false,"default_profile":false,"default_profile_image":false,"following":null,"follow_request_sent":null,"notifications":null},"geo":null,"coordinates":null,"place":null,"contributors":null,"retweet_count":0,"entities":{"hashtags":[{"text":"pp12","indices":[55,60]}],"urls":[],"user_mentions":[]},"favorited":false,"retweeted":false}\'\'\',  # noqa\n        r\'\'\'{"created_at":"Thu Apr 26 07:35:39 +0000 2012","id":195415832510201856,"id_str":"195415832510201856","text":"#pygrunn here i come!","source":"\\u003ca href=\\"http:\\/\\/itunes.apple.com\\/us\\/app\\/twitter\\/id409789998?mt=12\\" rel=\\"nofollow\\"\\u003eTwitter for Mac\\u003c\\/a\\u003e","truncated":false,"in_reply_to_status_id":null,"in_reply_to_status_id_str":null,"in_reply_to_user_id":null,"in_reply_to_user_id_str":null,"in_reply_to_screen_name":null,"user":{"id":10868922,"id_str":"10868922","name":"dimazest","screen_name":"dimazest","location":"Groningen, The Netherlands","description":"","url":"http:\\/\\/zest.id.lv","protected":false,"followers_count":181,"friends_count":236,"listed_count":9,"created_at":"Wed Dec 05 12:33:22 +0000 2007","favourites_count":52,"utc_offset":3600,"time_zone":"Rome","geo_enabled":true,"verified":false,"statuses_count":1192,"lang":"en","contributors_enabled":false,"is_translator":false,"profile_background_color":"709397","profile_background_image_url":"http:\\/\\/a0.twimg.com\\/images\\/themes\\/theme6\\/bg.gif","profile_background_image_url_https":"https:\\/\\/si0.twimg.com\\/images\\/themes\\/theme6\\/bg.gif","profile_background_tile":false,"profile_image_url":"http:\\/\\/a0.twimg.com\\/profile_images\\/1413931957\\/IMG_2219_normal.jpg","profile_image_url_https":"https:\\/\\/si0.twimg.com\\/profile_images\\/1413931957\\/IMG_2219_normal.jpg","profile_link_color":"FF3300","profile_sidebar_border_color":"86A4A6","profile_sidebar_fill_color":"A0C5C7","profile_text_color":"333333","profile_use_background_image":true,"show_all_inline_media":false,"default_profile":false,"default_profile_image":false,"following":null,"follow_request_sent":null,"notifications":null},"geo":null,"coordinates":null,"place":null,"contributors":null,"retweet_count":0,"entities":{"hashtags":[{"text":"pygrunn","indices":[0,8]}],"urls":[],"user_mentions":[]},"favorited":false,"retweeted":false}\'\'\',  # noqa\n        r\'\'\'{"created_at":"Sat May 12 09:15:43 +0000 2012","id":201239221502099456,"id_str":"201239221502099456","text":"that\'s fun \\u201c@gorban: http:\\/\\/t.co\\/rsjGQjCB\\u201d","source":"\\u003ca href=\\"http:\\/\\/itunes.apple.com\\/us\\/app\\/twitter\\/id409789998?mt=12\\" rel=\\"nofollow\\"\\u003eTwitter for Mac\\u003c\\/a\\u003e","truncated":false,"in_reply_to_status_id":null,"in_reply_to_status_id_str":null,"in_reply_to_user_id":null,"in_reply_to_user_id_str":null,"in_reply_to_screen_name":null,"user":{"id":10868922,"id_str":"10868922","name":"dimazest","screen_name":"dimazest","location":"Groningen, The Netherlands","description":"","url":"http:\\/\\/zest.id.lv","protected":false,"followers_count":181,"friends_count":236,"listed_count":9,"created_at":"Wed Dec 05 12:33:22 +0000 2007","favourites_count":52,"utc_offset":3600,"time_zone":"Rome","geo_enabled":true,"verified":false,"statuses_count":1192,"lang":"en","contributors_enabled":false,"is_translator":false,"profile_background_color":"709397","profile_background_image_url":"http:\\/\\/a0.twimg.com\\/images\\/themes\\/theme6\\/bg.gif","profile_background_image_url_https":"https:\\/\\/si0.twimg.com\\/images\\/themes\\/theme6\\/bg.gif","profile_background_tile":false,"profile_image_url":"http:\\/\\/a0.twimg.com\\/profile_images\\/1413931957\\/IMG_2219_normal.jpg","profile_image_url_https":"https:\\/\\/si0.twimg.com\\/profile_images\\/1413931957\\/IMG_2219_normal.jpg","profile_link_color":"FF3300","profile_sidebar_border_color":"86A4A6","profile_sidebar_fill_color":"A0C5C7","profile_text_color":"333333","profile_use_background_image":true,"show_all_inline_media":false,"default_profile":false,"default_profile_image":false,"following":null,"follow_request_sent":null,"notifications":null},"geo":null,"coordinates":null,"place":null,"contributors":null,"retweet_count":0,"entities":{"hashtags":[],"urls":[{"url":"http:\\/\\/t.co\\/rsjGQjCB","expanded_url":"http:\\/\\/compare.yandex.com","display_url":"compare.yandex.com","indices":[21,41]}],"user_mentions":[{"screen_name":"gorban","name":"Alexander Gorban","id":12825292,"id_str":"12825292","indices":[12,19]}]},"favorited":false,"retweeted":false,"possibly_sensitive":false}\'\'\',  # noqa\n    )\n\n\n@pytest.fixture\n', 'user': 'dimazest'}, '45': {'fragment': '    def current_user(self):\n        """Returns the logged in Facebook user, or None if unconnected."""\n        if not hasattr(self, "_current_user"):\n            self._current_user = None\n            user_id = parse_cookie(self.request.cookies.get("fb_user"))\n            if user_id:\n                self._current_user = User.get_by_key_name(user_id)\n        return self._current_user\n\n\nclass HomeHandler(BaseHandler):\n', 'user': 'dimazest'}, '42': {'fragment': 'def cause_segmentation_fault():\n    """Crashes the Python interpreter by segfaulting."""\n    i = ctypes.c_char(\'a\')\n    j = ctypes.pointer(i)\n    c = 0\n    while True:\n        j[c] = \'a\'\n        c += 1\n    return j\n\n', 'user': 'apawlik'}, '43': {'fragment': 'def make_data(intercept, tempslope, rainfallslope, numyears):\n    years = np.arange(2010 - numyears, 2011)\n    temps = np.random.uniform(70, 90, len(years))\n    rainfalls = np.random.uniform(100, 300, len(years))\n    noise = 2 * np.random.randn(len(years))\n    mosquitos = intercept + tempslope * temps + rainfallslope * rainfalls + noise\n    return zip(years, temps, rainfalls, mosquitos)\n\n', 'user': 'apawlik'}, '40': {'fragment': 'def btrimmer(seqrecord):\n    \'\'\' This function takes a SeqRecord object containing fastq data and returns a Seq \n    object with low-quality bases  (bases with quality scores of 2 and below) \n    removed from the end of the read\'\'\'\n#   your code goes here\n    choppedsequence = seqrecord    #  This is a placeholder, it does not trim!\n    return choppedsequence\n\n#   This part opens a fastq file, goes through it record-by-record, calls btrimmer \n#   and writes fastq-formatted reuslts to standard out.\ngenerator = SeqIO.parse("data/tiny.fastq", "fastq")\nfor fastqsequence in generator:\n    choppedfastqsequence = btrimmer(fastqsequence)\n    sys.stdout.write(choppedfastqsequence.format("fastq"))\n\n', 'user': 'apawlik'}, '41': {'fragment': 'def mangle_docstrings(app, what, name, obj, options, lines,\n                      reference_offset=[0]):\n\n    cfg = dict(use_plots=app.config.numpydoc_use_plots,\n               show_class_members=app.config.numpydoc_show_class_members)\n\n    if what == \'module\':\n        # Strip top title\n        title_re = re.compile(ur\'^\\s*[#*=]{4,}\\n[a-z0-9 -]+\\n[#*=]{4,}\\s*\',\n                              re.I|re.S)\n        lines[:] = title_re.sub(u\'\', u"\\n".join(lines)).split(u"\\n")\n    else:\n        doc = get_doc_object(obj, what, u"\\n".join(lines), config=cfg)\n        lines[:] = unicode(doc).split(u"\\n")\n\n', 'user': 'apawlik'}, '1': {'fragment': 'def mean(numlist):\n    try :\n        total = sum(numlist)\n        length = len(numlist)\n    except TypeError :\n        raise TypeError("The list was not numbers.")\n    except :\n        print "Something unknown happened with the list."\n    return total/length\n\n', 'user': 'apawlik'}, '5': {'fragment': 'def from_iterable(target, iterable):\n    consumer = consume_iterable(target, iterable)\n\n    try:\n        while True:\n            next(consumer)\n    except StopIteration:\n        pass\n\n\n', 'user': 'dimazest'}, '9': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '146': {'fragment': '    def __init__(self, data):\n        """\n        Parameters\n        ----------\n        data : str\n           String with lines separated by \'\\n\'.\n\n        """\n        if isinstance(data,list):\n            self._str = data\n        else:\n            self._str = data.split(\'\\n\') # store string as list of lines\n\n        self.reset()\n\n', 'user': 'apawlik'}, '147': {'fragment': 'def dynamic_array(size=1000000):\n    """Fills an array that is sized dynamically."""\n    dynamic = []\n    for i in range(size):\n        dynamic.append(random() * i)\n    return dynamic\n\n\n', 'user': 'apawlik'}, '144': {'fragment': 'def main():\n    for filename in sys.argv[1:]:\n        with open(filename, \'r\') as reader:\n            lines = reader.readlines()\n\n        title = extract_title(filename, lines)\n        lines = skip(filename, lines, True, \'---\', \'---\')\n        lines = skip(filename, lines, False, \'<div class="toc"\', \'</div>\')\n\n        if title:\n            print make_title(filename, title)\n        for line in lines:\n            print line.rstrip()\n\n        print\n\n', 'user': 'apawlik'}, '145': {'fragment': 'def unparse(ast, single_line_functions=False):\n    s = cStringIO.StringIO()\n    UnparseCompilerAst(ast, s, single_line_functions)\n    return s.getvalue().lstrip()\n\nop_precedence = { \'compiler.ast.Power\':3, \'compiler.ast.Mul\':2, \'compiler.ast.Div\':2,\n                  \'compiler.ast.Add\':1, \'compiler.ast.Sub\':1 }\n\nclass UnparseCompilerAst:\n    """ Methods in this class recursively traverse an AST and\n        output source code for the abstract syntax; original formatting\n        is disregarged.\n    """\n\n    #########################################################################\n    # object interface.\n    #########################################################################\n\n', 'user': 'apawlik'}, '142': {'fragment': "def border(grid, color):\n    assert grid.width > 1, 'Must have at least two columns to draw border.'\n    assert grid.height > 1, 'Must have at least two rows to draw border.'\n\n    grid[0,  :] = color\n    grid[-1, :] = color\n    grid[:,  0] = color\n    grid[:, -1] = color\n\n", 'user': 'apawlik'}, '143': {'fragment': "def main():\n    script = sys.argv[0]\n    filename = sys.argv[1]\n    data = np.loadtxt(filename, delimiter=',')\n    for m in data.mean(axis=1):\n        print m\n\nmain()\n\n", 'user': 'apawlik'}, '140': {'fragment': "def check():\n    if _sys.version_info < (2, 6):\n        print('check for Python version (python):')\n        print('outdated version of Python: ' + _sys.version)\n        return False\n    return True\n\n\n", 'user': 'apawlik'}, '141': {'fragment': "def main():\n    script, flags, filenames = handle_args(sys.argv)\n    if filenames == []:\n        process('stdin', None)\n    elif flags.merge:\n        process('all', filenames)\n    else:\n        for f in filenames:\n            process(f, [f])\n\n", 'user': 'apawlik'}, '148': {'fragment': 'def mangle_docstrings(app, what, name, obj, options, lines,\n                      reference_offset=[0]):\n\n    cfg = dict(use_plots=app.config.numpydoc_use_plots,\n               show_class_members=app.config.numpydoc_show_class_members)\n\n    if what == \'module\':\n        # Strip top title\n        title_re = re.compile(ur\'^\\s*[#*=]{4,}\\n[a-z0-9 -]+\\n[#*=]{4,}\\s*\',\n                              re.I|re.S)\n        lines[:] = title_re.sub(u\'\', u"\\n".join(lines)).split(u"\\n")\n    else:\n        doc = get_doc_object(obj, what, u"\\n".join(lines), config=cfg)\n        lines[:] = unicode(doc).split(u"\\n")\n\n', 'user': 'apawlik'}, '149': {'fragment': "def write_cooccurrence_matrix(counter, output, utterances, metadata):\n    if output == '-':\n        for (row, column), count in counter.items():\n            print(row, column, count)\n    else:\n        write_cooccurrence_matrix_hd5(counter, output, utterances, metadata)\n\n\n", 'user': 'dimazest'}, '77': {'fragment': 'def conway(population, generations=100):\n    """Runs Conway\'s game of life on an initial population."""\n    population = set(population)\n    for i in range(generations):\n        population = evolve(population)\n    return list(population) \n\n\n', 'user': 'DevasenaInupakutika'}, '76': {'fragment': 'def zip_install(url, sha1, install_directory):\n    """Download and install a zipped bundle of compiled software"""\n    r = _urlopen(url)\n    zip_bytes = r.read()\n    download_sha1 = hashlib.sha1(zip_bytes).hexdigest()\n    if download_sha1 != sha1:\n        raise ValueError(\n            \'downloaded {!r} has the wrong SHA1 hash: {} != {}\'.format(\n                url, downloaded_sha1, sha1))\n    zip_io = _BytesIO(zip_bytes)\n    zip_file = zipfile.ZipFile(zip_io)\n    if not os.path.isdir(install_directory):\n        os.makedirs(install_directory)\n        zip_file.extractall(install_directory)\n\n\n', 'user': 'apawlik'}, '75': {'fragment': "def border(grid, color):\n    assert grid.width > 1, 'Must have at least two columns to draw border.'\n    assert grid.height > 1, 'Must have at least two rows to draw border.'\n\n    grid[0,  :] = color\n    grid[-1, :] = color\n    grid[:,  0] = color\n    grid[:, -1] = color\n\n", 'user': 'apawlik'}, '74': {'fragment': "def main():\n    script = sys.argv[0]\n    action = sys.argv[1]\n    filenames = sys.argv[2:]\n    assert action in ['--min', '--mean', '--max'], \\\n           'Action is not one of --min, --mean, or --max: ' + action\n    for f in filenames:\n        process(f, action)\n\n", 'user': 'apawlik'}, '73': {'fragment': 'def zip_install(url, sha1, install_directory):\n    """Download and install a zipped bundle of compiled software"""\n    r = _urlopen(url)\n    zip_bytes = r.read()\n    download_sha1 = hashlib.sha1(zip_bytes).hexdigest()\n    if download_sha1 != sha1:\n        raise ValueError(\n            \'downloaded {!r} has the wrong SHA1 hash: {} != {}\'.format(\n                url, downloaded_sha1, sha1))\n    zip_io = _BytesIO(zip_bytes)\n    zip_file = zipfile.ZipFile(zip_io)\n    if not os.path.isdir(install_directory):\n        os.makedirs(install_directory)\n        zip_file.extractall(install_directory)\n\n\n', 'user': 'apawlik'}, '72': {'fragment': "def f(x):\n\treturn (7.0 + (1+x)**(4.0/3.0))**(1.0/3.0)\n\n#Through someone else's labors we know the expansion to be... \nf_exp = [2.0, 1.0/9.0, 1.0/81.0, -49.0/8748.0, 175.0/78732.0]\n\n#The Pade coefficients are given simply by, \np, q = scipy.misc.pade(f_exp, (5-1)/2)\n#p and q are of numpy's polynomial class\n#So the Pade approximation is given by \n", 'user': 'apawlik'}, '71': {'fragment': 'def unparse(ast, single_line_functions=False):\n    s = cStringIO.StringIO()\n    UnparseCompilerAst(ast, s, single_line_functions)\n    return s.getvalue().lstrip()\n\nop_precedence = { \'compiler.ast.Power\':3, \'compiler.ast.Mul\':2, \'compiler.ast.Div\':2,\n                  \'compiler.ast.Add\':1, \'compiler.ast.Sub\':1 }\n\nclass UnparseCompilerAst:\n    """ Methods in this class recursively traverse an AST and\n        output source code for the abstract syntax; original formatting\n        is disregarged.\n    """\n\n    #########################################################################\n    # object interface.\n    #########################################################################\n\n', 'user': 'apawlik'}, '70': {'fragment': 'def downloadgbk(accessionno):\n    from Bio import Entrez\n    Entrez.email = "swc@example.com    # Tell NCBI who you are!\n    Entrez.tool = "SoftwareCarpentryBootcamp"\n\n    filename = "%s.gbk" % accessionno       \n    print "Trying efectch on %s, writing to %s" % ( accessionno, filename )\n    if not os.path.isfile(filename):  \n        net_handle = Entrez.efetch(db="nucleotide", id=accessionno, rettype="gb", retmode="text") \n        out_handle = open(filename, "w")\n        out_handle.write(net_handle.read()) \n        net_handle.close()\n        out_handle.close()\n    else:\n        print "skipping, %s already exists!" % filename\n\n', 'user': 'apawlik'}, '79': {'fragment': '    def __init__(self,location,zoom=16,size=1200,outfile=None):\n        self.zoom=zoom\n        self.location=location\n        self.size=size\n        here=os.path.dirname(__file__)\n        try:\n            self.config=yaml.load(open(os.path.expanduser(os.path.join("~",".lasermaps",\'config.yml\'))))\n        except:\n            self.config=yaml.load(open(os.path.join(here,\'config.yml\')))\n        if outfile is None:\n            self.outfile=\'result.png\'\n        else:\n            self.outfile=outfile\n        self.result=open(self.outfile,\'w\')\n        self.geocoder=geopy.geocoders.GoogleV3(domain="maps.google.co.uk")\n        self.geocode()\n\n', 'user': 'jamespjh'}, '78': {'fragment': 'def calculate_gc(x):\n    """Calculates the GC content of DNA sequence x.\n    x: a string composed only of A\'s, T\'s, G\'s, and C\'s."""\n    x = x.upper()\n    return float(x.count(\'G\') + x.count(\'C\')) / (x.count(\'G\') + x.count(\'C\') + x.count(\'A\') + x.count(\'T\'))\n\n"""\nLonger exercise: Reading Cochlear implant into Python\n\nPart 1:\nWrite a function `view_cochlear` that will open the file and print out each line. The only input to the function should be the name of the file as a string. \n"""\n', 'user': 'DevasenaInupakutika'}}

